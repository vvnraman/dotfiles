# vim: set filetype=sh : */

function git-update-commit-date()
{
  local _date_str=`date`
  GIT_COMMITTER_DATE="${_date_str}" \
    git commit --amend --no-edit --date "${_date_str}"
}

function git-sync-origin-with-usptream()
{
  local _origin_str="`git remote get-url origin`"
  local _upstream_str="`git remote get-url upstream`"
  echo "Syncing ${_origin_str}/master with ${_upstream_str}/master"
  git push origin upstream/master:master
}

function git-init-with-empty-commit()
{
  git init . && \
    git commit --allow-empty --message "Initial commit."
}

function git-top()
{
  git rev-parse --show-toplevel || true
}

function git-clone()
{
  if [[ $# -ne 2 ]]; then
    echo "Usage: git-clone <org> <repo>"
    return
  fi
  local _org="${1}"
  local _repo="${2}"
  if [[ -z "${_org//}" || -z "${_repo//}" ]]; then
    echo "<org> or <repo> is not valid."
    return
  fi
  mkdir "${_repo}" \
    && cd "${_repo}" \
    && git clone "github:${_org}/${_repo}" "${_reop}"
}

function git-pull-all-branches()
{
  git branch -r | \
    grep -v '\->' | \
    while read remote; do \
      git branch --track "${remote#origin/}" "${remote}"; \
    done
}

function git-show-ignored()
{
  git ls-files . --ignored --exclude-standard --others
}

function git-show-untracked()
{
  git ls-files . --exclude-standard --others
}

function git-worktree-new-branch()
{
  if [[ $# -ne 1 ]]; then
    echo "Usage: git-worktree-new-branch <branch>"
    return
  fi
  local _branch="${1}"
  if [[ -z "${_branch//}" ]]; then
    echo "<branch> name is not valid."
    return
  fi
  local _source_dir="$(git-top)"
  local _base_dir="$(dirname ${_source_dir})"
  local _project="$(basename ${_source_dir})"

  echo "Branch = ${_branch}, Project = ${_project}"
  git worktree add -b "${_branch}" "${_base_dir}/${_project}_${_branch}"
}

function git-worktree-new-remote-branch()
{
  if [[ $# -ne 2 ]]; then
    echo "Usage: git-worktree-new-remote-branch <remote> <branch>"
    return
  fi
  local _remote="${1}"
  local _branch="${2}"
  if [[ -z "${_remote//}" || -z "${_branch//}" ]]; then
    echo "<remote> or <branch> name is not valid."
    return
  fi
  local _source_dir="$(git-top)"
  local _base_dir="$(dirname ${_source_dir})"
  local _project="$(basename ${_source_dir})"

  echo "Branch = ${_branch}, Project = ${_project}"
  git remote add "${_remote}" "github:${_remote}/${_project}" \
    && git fetch --all \
    && git worktree add --track -b "${_branch}" \
      "${_base_dir}/${_project}_${_remote}_${_branch}" \
      "${_remote}_${_branch}"
}

function git-worktree-existing-remote-branch()
{
  if [[ $# -ne 2 ]]; then
    echo "Usage: git-worktree-new-remote-branch <remote> <branch>"
    return
  fi
  local _remote="${1}"
  local _branch="${2}"
  if [[ -z "${_remote//}" || -z "${_branch//}" ]]; then
    echo "<remote> or <branch> name is not valid."
    return
  fi
  local _source_dir="$(git-top)"
  local _base_dir="$(dirname ${_source_dir})"
  local _project="$(basename ${_source_dir})"

  echo "Branch = ${_branch}, Project = ${_project}"
  git worktree add --track -b "${_branch}" \
      "${_base_dir}/${_project}_${_remote}_${_branch}" \
      "${_remote}_${_branch}"
}

log_stamp=$(date +"%G-week-%V")
log_file="${HOME}/.bash-load/log-${log_stamp}.log"
echo "`date` - bashrc-custom-git" >> "${log_file}"
